<?php
/*
 * @file
 */


/**
 * Implements hook_menu().
 */
function brdg_instagram_menu() {
	$items['instagram_test'] = array(
		'page callback' => 'instagram_test_fetch',
		'access callback' => TRUE,
	);

	return $items;
}

// Memu callback
function instagram_test_fetch() {
	$node_type = 'content_from_source';
 	module_load_include('inc', 'drupagram');
 	$settings = brdg_instagram_get_app_settings();
 	$instagram_uid = $settings['instagram_uid'];
	// Load object of API
	$drupagram = drupagram_connect(drupagram_account_load($instagram_uid));
	$results = $drupagram->fetch('tags_recent', array('!tag_name' => 'snowy'));

	foreach ($results as $result) {
		// Save user profile image media.
		$media_image = add_image_from_url($result->images['standard_resolution']['url'], 'instagram');
		// Save shared image media.	
		$user_profile_image = add_image_from_url($result->user->profile_picture, 'instagram');
		if (!$media_image || !$user_profile_image) {
			dpm('hello');
			continue;
		}
		$node = (Object)null;
		$node->type = $node_type;
		node_object_prepare($node);
		$node->title = 'from instagram';
		$node->language = 'en';
		$node->uid = 1;
		$node->status = 1;
		$node->comment = 2;
		// Sometimes it has "Incorrect string value" error from mysql;
		// Sometimes it has "Incorrect string value" error from mysql;
		$node->body[LANGUAGE_NONE][0]['value'] = remove_non_utf8_string($result->caption['text']);
		$node->body[LANGUAGE_NONE][0]['summary'] = remove_non_utf8_string($result->caption['text']);
		$node->body[LANGUAGE_NONE][0]['format'] = 'full_html';
		$node->field_source_id[LANGUAGE_NONE][0]['value'] = $result->id;
		$node->field_from_user_id[LANGUAGE_NONE][0]['value'] = $result->user->id;
		$node->field_from_user_name[LANGUAGE_NONE][0]['value'] = $result->user->username;
		$node->field_from_user_profile_image[LANGUAGE_NONE][0] = (array)$user_profile_image;
		$node->field_post_date[LANGUAGE_NONE][0] = array(
			'value' => date('Y-m-d H:i:s', $result->created_time),
		);
		$node->field_media_image[LANGUAGE_NONE][] = (array)$media_image;
		// set media source type
		if ($source = brdg_instagbram_source_type()) {
			$node->field_source_type[LANGUAGE_NONE][0]['tid'] = $source->tid;
		}
		brdg_core_node_save($node, 'brdg_instagram');
	}
	return 'hello world';
}

// Load instagram settings.
function brdg_instagram_get_app_settings() {
	static $settings;
	if ($settings) return $settings;
	$settings = require_once(drupal_get_path('module', 'brdg_instagram').'/brdg_instagram.settings.php');
	return $settings;
}

function brdg_instagbram_source_type() {
	// Load settings
	$instagram_settings = brdg_instagram_get_app_settings();
	$source_name = $instagram_settings['source_type'];
	return brdg_core_get_source_with_name($source_name);
}

// Filter to handler blackuser list.
function brdg_instagram_brdg_core_filter(&$node, $from) {
	return TRUE;
	if ($from == 'brdg_instagram') {
		$blackusers = brdg_user_block_list();
		$instagram_uid = $node->field_from_user_id[LANGUAGE_NONE][0]['value'];
		$instagram_account = drupagram_account_load($instagram_uid);
		if ($instagram_account) {
			foreach ($blackusers as $blackuser) {
				foreach ($blackuser->drupagram_accounts as $drupagram_account) {
					if ($drupagram_account->id == $instagram_uid) {
						return FALSE;
					}
				}
			}
			return TRUE;
		}
		else {
			return FALSE;
		}
	}
}