<?php

/**
 * @file
 */

// Load settings for weibo fetching.
function brdg_weibo_get_app_settings() {
	static $settings;
	if ($settings) return $settings;
	$settings = require_once(drupal_get_path('module', 'brdg_weibo').'/brdg_weibo.settings.php'
		);
	return $settings;
}

/**
 * Implements hook_menu().
 */
function brdg_weibo_menu() {
	$items['test_weibo'] = array(
		'page callback' => 'brdg_weibo_test_page_callback',
		'access callback' => TRUE,
	);

	return $items;
}

// Menu callback.
function brdg_weibo_test_page_callback() {
	$settings = brdg_weibo_get_app_settings();
	$weibo_account = brdg_weibo_load_account();
	$access_token = $weibo_account['oauth_token'];
	$api = brdg_weibo_client($access_token);
	$params = array();
	$params['a'] = urlencode("上海");
	$params['count'] = $settings['max_num'];
	$params['page'] = 1;
	$search_ret = $api->oauth->get('statuses/public_timeline', $params);

	$statuses = $search_ret['statuses'];

	// Insert it into node
	foreach ($statuses as $status) {
		$node_type = 'content_from_source';
		$id = $status['idstr'];
		$query = new EntityFieldQuery();
		$result = $query->entityCondition('entity_type', 'node')
			->entityCondition('bundle', $node_type)
			->fieldCondition('field_source_id', 'value', $id)
			->execute();
		if ($result) {
			return NULL;
		}
		$user_profile_image = add_image_from_url($status['user']['profile_image_url']);
		$node = (Object)null;
		$node->type = $node_type;
		node_object_prepare($node);
		$node->title = 'from weibo';
		$node->language = 'en';
		$node->uid = 1;
		$node->status = 1;
		$node->comment = 2;
		// Sometimes it has "Incorrect string value" error from mysql;
		$node->body[LANGUAGE_NONE][0]['value'] = remove_non_utf8_string($status['text']);
		$node->body[LANGUAGE_NONE][0]['summary'] = remove_non_utf8_string($status['text']);
		$node->body[LANGUAGE_NONE][0]['format'] = 'full_html';
		$node->field_source_id[LANGUAGE_NONE][0]['value'] = $status['idstr'];
		$node->field_from_user_id[LANGUAGE_NONE][0]['value'] = $status['user']['idstr'];
		$node->field_from_user_name[LANGUAGE_NONE][0]['value'] = $status['user']['screen_name'];
		$node->field_from_user_profile_image[LANGUAGE_NONE][0] = (array)$user_profile_image;
		$node->field_post_date[LANGUAGE_NONE][0] = array(
			'value' => date('Y-m-d H:i:s', strtotime($status['created_at'])),
		);
		// set media source type
		if ($source = brdg_weibo_source_type()) {
			$node->field_source_type[LANGUAGE_NONE][0]['tid'] = $source->tid;
		}
		// If doesn't include any media, we don't need insert into our system.
		brdg_core_node_save($node, 'brdg_weibo');
	}
	return date('Y-m-d');
}

// Helper function to load weibo account from uid.
function brdg_weibo_load_account($uid = 0) {
	if (!$uid) {
		global $user;
		$uid = $user->uid;
	}
	$weibo_account = db_select('weibo_account')
		->fields('weibo_account')
		->condition('uid', $uid)
		->execute()
		->fetchAssoc();
	return $weibo_account;
}

function brdg_weibo_load_account_with_weibo_uid($weibo_uid) {
	$weibo_account = db_select('weibo_account')
		->fields('weibo_account')
		->condition('weibo_uid', $weibo_uid)
		->execute()
		->fetchAssoc();
	if ($weibo_account) {
		return user_load($weibo_account->uid);
	}
}

// Helper function to load weibo API client.
function brdg_weibo_client($access_token) {
    module_load_include('php', 'sinaweibo', 'saetv2.ex.class');
	$key = variable_get('weibo_consumer_key', '');
	$secret = variable_get('weibo_consumer_secret', '');
	$token = $_SESSION['weibooauth_token']['access_token'];
	return new SaeTClientV2($key , $secret , $token);
}

function brdg_weibo_source_type() {
	// Load settings
	$settings = brdg_weibo_get_app_settings();
	$source_name = $settings['source_type'];
	return brdg_core_get_source_with_name($source_name);
}

function brdg_weibo_brdg_core_filter(&$node, $from) {
	if ($from == 'brdg_weibo') {
		$blackusers = brdg_user_block_list();
		$weibo_uid = $node->field_from_user_id[LANGUAGE_NONE][0]['value'];
		$weibo_account = brdg_weibo_load_account_with_weibo_uid($weibo_uid);
		if ($weibo_account) {
			foreach ($blackusers as $blackuser) {
				if ($blackuser->uid == $twitter_account->uid) {
					return FALSE;
				}
			}
			return TRUE;
		}
		else {
			return FALSE;
		}
	}
}